AWSTemplateFormatVersion: 2010-09-09

Transform:
  - AWS::Serverless-2016-10-31

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Deployment
        Parameters:
          - Vpc
          - PublicSubnets
          - PrivateSubnets
          - ClusterName
      - Label:
          default: Configuration
        Parameters:
          - DomainName
          - EmailFrom
          - CertificateArn
    ParameterLabels:
      Vpc:
        default: Vpc
      PublicSubnets:
        default: Public Subnets
      PrivateSubnets:
        default: Private Subnets
      ClusterName:
        default: ECS Cluster Name
      DomainName:
        default: Domain Name
      EmailFrom:
        default: Email From Address
      CertificateArn:
        default: SSL Certificate Arn

Parameters:

  Vpc:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to use.

  PublicSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The Public Subnets for the Load Balancer.

  PrivateSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The Private Subnets for the ECS task and EFS

  ClusterName:
    Type: String
    Description: The name of an existing ECS cluster (leave blank to create a new cluster).
    Default: ''

  DomainName:
    Type: String
    Description: The domain url to be used to access VaultWarden.
    AllowedPattern: '^[a-z0-9\-\.]+[^\.]$'
    ConstraintDescription: 'Must be a valid domain name string and also must NOT end in a full stop.'
    Default: vaultwarden.example.com

  EmailFrom:
    Type: String
    Description: The email address for VaultWarden to send from.
    AllowedPattern: '^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$'
    ConstraintDescription: 'Must be a valid email address'
    Default: vaultwarden@example.com

  CertificateArn:
    Type: String
    Description: The Arn for the ACM certificate for the supplied Dns Name.

Conditions:

  CreateCluster: !Equals [!Ref ClusterName, '']

  LogDeliverySupported: !Not
    - !Or
        - !Or
          - !Equals [!Ref 'AWS::Region', 'af-south-1']
          - !Equals [!Ref 'AWS::Region', 'ap-east-1']
          - !Equals [!Ref 'AWS::Region', 'ap-northeast-1']
          - !Equals [!Ref 'AWS::Region', 'ap-northeast-2']
          - !Equals [!Ref 'AWS::Region', 'ap-northeast-3']
          - !Equals [!Ref 'AWS::Region', 'ap-south-1']
          - !Equals [!Ref 'AWS::Region', 'ap-southeast-1']
          - !Equals [!Ref 'AWS::Region', 'ap-southeast-2']
          - !Equals [!Ref 'AWS::Region', 'ap-southeast-3']
          - !Equals [!Ref 'AWS::Region', 'ca-central-1']
        - !Or
          - !Equals [!Ref 'AWS::Region', 'eu-central-1']
          - !Equals [!Ref 'AWS::Region', 'eu-north-1']
          - !Equals [!Ref 'AWS::Region', 'eu-south-1']
          - !Equals [!Ref 'AWS::Region', 'eu-west-1']
          - !Equals [!Ref 'AWS::Region', 'eu-west-2']
          - !Equals [!Ref 'AWS::Region', 'eu-west-3']
          - !Equals [!Ref 'AWS::Region', 'me-south-1']
          - !Equals [!Ref 'AWS::Region', 'sa-east-1']
          - !Equals [!Ref 'AWS::Region', 'us-east-1']
          - !Equals [!Ref 'AWS::Region', 'us-east-2']
        - !Or
          - !Equals [!Ref 'AWS::Region', 'us-gov-east-1']
          - !Equals [!Ref 'AWS::Region', 'us-gov-west-1']
          - !Equals [!Ref 'AWS::Region', 'us-west-1']
          - !Equals [!Ref 'AWS::Region', 'us-west-2']

Mappings:

  LoggingAccount:
    af-south-1:
      id: '098369216593'
    ap-east-1:
      id: '754344448648'
    ap-northeast-1:
      id: '582318560864'
    ap-northeast-2:
      id: '600734575887'
    ap-northeast-3:
      id: '383597477331'
    ap-south-1:
      id: '718504428378'
    ap-southeast-1:
      id: '114774131450'
    ap-southeast-2:
      id: '783225319266'
    ap-southeast-3:
      id: '589379963580'
    ca-central-1:
      id: '985666609251'
    eu-central-1:
      id: '054676820928'
    eu-north-1:
      id: '897822967062'
    eu-south-1:
      id: '635631232127'
    eu-west-1:
      id: '156460612806'
    eu-west-2:
      id: '652711504416'
    eu-west-3:
      id: '009996457667'
    me-south-1:
      id: '076674570225'
    sa-east-1:
      id: '507241528517'
    us-east-1:
      id: '127311923021'
    us-east-2:
      id: '	033677994240'
    us-gov-east-1:
      id: '190560391635'
    us-gov-west-1:
      id: '048591011584'
    us-west-1:
      id: '027434742980'
    us-west-2:
      id: '797873946194'

Resources:

  AdminToken:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W77
            reason: Custom KMS Key not required.
    Properties:
      Description: This is the Admin Token required to access the VaultWarden Admin page.
      GenerateSecretString:
        PasswordLength: 32
        ExcludePunctuation: True

  UtilityFunction:
    Type: AWS::Serverless::Function
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: VPC not required.
          - id: W92
            reason: ReservedConcurrentExecutions not required.
    Properties:
      Runtime: python3.10
      Handler: app.handler
      MemorySize: 128
      Timeout: 3
      CodeUri: functions/utility-function
      Policies:
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref AdminToken

  SmtpUser:
    Type: AWS::IAM::User
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F10
            reason: Single user policy.
          - id: F2000
            reason: Single user no groups required.
    Properties:
      Policies:
        - PolicyName: SesPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ses:SendRawEmail
                Resource: '*'

  SmtpAccessKey:
    Type: AWS::IAM::AccessKey
    Properties:
      UserName: !Ref SmtpUser

  Secrets:
    Type: Custom::Utility
    Properties:
      ServiceToken: !GetAtt UtilityFunction.Arn
      SecretAccessKey: !GetAtt SmtpAccessKey.SecretAccessKey
      TokenSecretId: !Ref AdminToken

  SmtpSecret:
    Type: AWS::SecretsManager::Secret
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W77
            reason: Custom KMS Key not required.
    Properties:
      Description: This secret holds the SMTP credentials for SES.
      SecretString: !Sub '{"username": "${SmtpAccessKey}", "password": "${Secrets.SmtpPassword}"}'

  SecurityGroupEcs:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: All protocols desired for outbound traffic.
          - id: W40
            reason: All protocols desired for outbound traffic.
    Properties:
      GroupDescription: Access to the containers
      VpcId: !Ref Vpc
      SecurityGroupEgress:
        - Description: All outbound
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  SecurityGroupAlb:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W2
            reason: All https traffic allowed.
          - id: W9
            reason: All https traffic allowed.
    Properties:
      GroupDescription: Access to the load balancer
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: http access
          CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      SecurityGroupEgress:
        - Description: Outbound to ECS
          DestinationSecurityGroupId: !Ref SecurityGroupEcs
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80

  SecurityGroupEcsIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupEcs
      Description: Inbound from ALB
      SourceSecurityGroupId: !Ref SecurityGroupAlb
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80

  SecurityGroupEfs:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W5
            reason: All protocols desired for outbound traffic.
          - id: W40
            reason: All protocols desired for outbound traffic.
    Properties:
      GroupDescription: Access to EFS
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - Description: ECS EFS access
          SourceSecurityGroupId: !Ref SecurityGroupEcs
          FromPort: 2049
          ToPort: 2049
          IpProtocol: tcp
      SecurityGroupEgress:
        - Description: All outbound
          CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  FileSystem:
    Type: AWS::EFS::FileSystem
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: TRUE
      LifecyclePolicies:
        - TransitionToIA: AFTER_14_DAYS
      PerformanceMode: generalPurpose
      ThroughputMode: bursting

  MountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Select [0, !Ref PrivateSubnets]
      SecurityGroups:
        - !Ref SecurityGroupEfs

  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Select [1, !Ref PrivateSubnets]
      SecurityGroups:
        - !Ref SecurityGroupEfs

  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystem
      SubnetId: !Select [2, !Ref PrivateSubnets]
      SecurityGroups:
        - !Ref SecurityGroupEfs

  LogBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logging not required.
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  LogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref LogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: s3:PutObject
            Principal: !If
              - LogDeliverySupported
              - Service: logdelivery.elasticloadbalancing.amazonaws.com
              - AWS: !Sub
                  - 'arn:aws:iam::${LogAccountId}:root'
                  - LogAccountId: !FindInMap [LoggingAccount, !Ref 'AWS::Region', id]
            Resource: !Sub '${LogBucket.Arn}/vaultwarden-alb/AWSLogs/${AWS::AccountId}/*'

  LoadBalancer:
    DependsOn: LogBucketPolicy
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      IpAddressType: ipv4
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref SecurityGroupAlb
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
        - Key: access_logs.s3.enabled
          Value: True
        - Key: access_logs.s3.bucket
          Value: !Ref LogBucket
        - Key: access_logs.s3.prefix
          Value: vaultwarden-alb

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTPS
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn
      SslPolicy: ELBSecurityPolicy-TLS13-1-0-2021-06
      DefaultActions:
        - Order: 10
          Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Protocol: HTTP
      Port: 80
      TargetType: ip
      VpcId: !Ref Vpc
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '5'
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 2
      HealthCheckIntervalSeconds: 5
      Matcher:
        HttpCode: '200'

  EcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: The ECS Execution IAM Role
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: CreateLogGroup
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
        - PolicyName: GetSecretValues
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref SmtpSecret

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: '1024'
      Memory: '2048'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt EcsExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      ContainerDefinitions:
        - Name: vaultwarden
          Image: vaultwarden/server:latest
          Environment:
            - Name: ADMIN_TOKEN
              Value: !GetAtt Secrets.AdminToken
            - Name: SMTP_HOST
              Value: !Sub email-smtp.${AWS::Region}.amazonaws.com
            - Name: SMTP_FROM
              Value: !Ref EmailFrom
            - Name: SMTP_PORT
              Value: '587'
            - Name: SMTP_SSL
              Value: 'true'
            - Name: DOMAIN
              Value: !Sub https://${DomainName}
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: AWS_REGION
              Value: !Ref AWS::Region
          Secrets:
            - Name: SMTP_USERNAME
              ValueFrom: !Sub '${SmtpSecret}:username::'
            - Name: SMTP_PASSWORD
              ValueFrom: !Sub '${SmtpSecret}:password::'
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: /ecs/vaultwarden
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: external
          LinuxParameters:
            InitProcessEnabled: True
          Essential: True
          MountPoints:
            - SourceVolume: efs-vaultwarden
              ContainerPath: /data
              ReadOnly: False
      Volumes:
        - Name: efs-vaultwarden
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystem
            RootDirectory: /
            TransitEncryption: ENABLED
            AuthorizationConfig:
              IAM: ENABLED

  EcsCluster:
    Condition: CreateCluster
    Type: AWS::ECS::Cluster
#    Properties:
#      CapacityProviders: 
#        - String
#      ClusterSettings:
#        - ClusterSettings
#      Configuration:
#        ClusterConfiguration
#      DefaultCapacityProviderStrategy:
#        - CapacityProviderStrategyItem
#      ServiceConnectDefaults:
#        ServiceConnectDefaults
#      Tags:
#        - Tag

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: Listener
    Properties:
      Cluster: !If
        - CreateCluster
        - !Ref EcsCluster
        - !Ref ClusterName
      TaskDefinition: !Ref EcsTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: vaultwarden
          ContainerPort: 80
      DesiredCount: 1
      EnableExecuteCommand: True
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref SecurityGroupEcs
          Subnets: !Ref PrivateSubnets
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DeploymentController:
        Type: ECS
      EnableECSManagedTags: True
      Tags:
        - Key: target-group-arn
          Value: !Ref TargetGroup

  EcsTaskRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F3
            reason: Specific permision not possible.
          - id: W11
            reason: Resource level policy not possible.
    Properties:
      Description: The ECS Execution IAM Role
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: EFS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticfilesystem:*'
                Resource: !Sub 'arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${FileSystem}'
        - PolicyName: SSM
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'

  Waf:
    Type: AWS::WAFv2::WebACL
    Properties:
      Scope: REGIONAL
      Description: WAF for VaultWarden
      DefaultAction:
        Allow:  {}
      VisibilityConfig:
        SampledRequestsEnabled: True
        CloudWatchMetricsEnabled: True
        MetricName: VaultWardenWaf
      Rules:
        - Name: AWSManagedRulesAdminProtectionRuleSet
          Priority: 0
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesAdminProtectionRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAdminProtectionRuleSet
        - Name: AWSManagedRulesAmazonIpReputationList
          Priority: 1
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesAmazonIpReputationList
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAmazonIpReputationList
        - Name: AWSManagedRulesAnonymousIpList
          Priority: 2
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesAnonymousIpList
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesAnonymousIpList
        - Name: AWSManagedRulesCommonRuleSet
          Priority: 3
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesCommonRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesCommonRuleSet
        - Name: AWSManagedRulesKnownBadInputsRuleSet
          Priority: 4
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesKnownBadInputsRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesKnownBadInputsRuleSet
        - Name: AWSManagedRulesLinuxRuleSet
          Priority: 5
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesLinuxRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesLinuxRuleSet
        - Name: AWSManagedRulesPHPRuleSet
          Priority: 6
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesPHPRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesPHPRuleSet
        - Name: AWSManagedRulesSQLiRuleSet
          Priority: 7
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesSQLiRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesSQLiRuleSet
        - Name: AWSManagedRulesUnixRuleSet
          Priority: 8
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesUnixRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesUnixRuleSet
        - Name: AWSManagedRulesWindowsRuleSet
          Priority: 9
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesWindowsRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesWindowsRuleSet
        - Name: AWSManagedRulesWordPressRuleSet
          Priority: 10
          OverrideAction:
            None: {}
          VisibilityConfig:
            SampledRequestsEnabled: True
            CloudWatchMetricsEnabled: True
            MetricName: AWSManagedRulesWordPressRuleSet
          Statement:
            ManagedRuleGroupStatement:
              VendorName: AWS
              Name: AWSManagedRulesWordPressRuleSet

  WafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties:
      ResourceArn: !Ref LoadBalancer
      WebACLArn: !GetAtt Waf.Arn

Outputs:

  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
  
  AdminTokenSecretId:
    Value: !Ref AdminToken
